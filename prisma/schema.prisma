generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id     String @id @default(cuid())
  phones String?
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  balance Decimal @default(0) @db.Decimal(10, 2)
  accounts  Account[]
  sessions  Session[]
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Booking {
  id            String       @id @default(cuid())
  userId        String // ID do OPERADOR que registou
  serviceId     String
  date          DateTime
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  transactionId String?      @unique
  description   String
  NavasService  NavasService @relation(fields: [serviceId], references: [id])
  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
  User          User         @relation(fields: [userId], references: [id])
}

model Navas {
  id           String         @id @default(cuid())
  name         String
  phones       String
  description  String
  imageUrl     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  NavasService NavasService[]
  Transaction  Transaction[]
}

model NavasService {
  id          String    @id @default(cuid())
  name        String
  description String
  imageUrl    String
  price       Decimal   @db.Decimal(10, 2)
  NavasId     String
  Booking     Booking[]
  Navas       Navas     @relation(fields: [NavasId], references: [id])
}

model Transaction {
  id            String                   @id @default(cuid())
  name          String
  type          TransactionType
  amount        Decimal                  @db.Decimal(10, 2)
  category      TransactionCategory
  paymentMethod TransactionPaymentMethod
  date          DateTime
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  navasId       String
  Booking       Booking?
  Navas         Navas                    @relation(fields: [navasId], references: [id])
}

enum TransactionCategory {
  SERVICE_PAYMENT
  PARTS_PURCHASE
  TOOLS
  FUEL
  VEHICLE_MAINTENANCE
  SALARIES
  TAXES
  OTHER
}

enum TransactionPaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  BANK_SLIP
  CASH
  PIX
  OTHER
}

enum TransactionType {
  DEPOSIT
  EXPENSE
}
